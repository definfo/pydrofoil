import sys
import math
from hypothesis import given, strategies, assume, example, settings
from fractions import Fraction
from pydrofoil.real import *

MAXINT = sys.maxint
MININT = -sys.maxint - 1

positive_ints = strategies.integers(min_value=1)

def test_add_real():
    x = Real.fromint(5)
    y = Real.fromint(7)
    res = x.add(y)
    assert res.toint() == 12
    x = Real.fromint(3, 4)
    y = Real.fromint(5, 4)
    res = x.add(y)
    assert res.toint() == 2
    x = Real.fromint(1, 2)
    y = Real.fromint(1, 2)
    res = x.add(y)
    assert res.toint() == 1
    x = Real.fromint(4, 2)
    y = Real.fromint(9, 3)
    res = x.add(y)
    assert res.toint() == 5
    x = Real.fromint(-4, 2)
    y = Real.fromint(9, -3)
    res = x.add(y)
    assert res.toint() == -5
    x = Real.fromint(-4, -2)
    y = Real.fromint(-9, 3)
    res = x.add(y)
    assert res.toint() == -1

def test_sub_real():
    x = Real.fromint(16)
    y = Real.fromint(6)
    res = x.sub(y)
    assert res.toint() == 10
    x = Real.fromint(-10)
    y = Real.fromint(6)
    res = x.sub(y)
    assert res.toint() == -16
    x = Real.fromint(-10)
    y = Real.fromint(-6)
    res = x.sub(y)
    assert res.toint() == -4
    x = Real.fromint(-4, 2)
    y = Real.fromint(9, -3)
    res = x.sub(y)
    assert res.toint() == 1
    x = Real.fromint(-4, 2)
    y = Real.fromint(9, 3)
    res = x.sub(y)
    assert res.toint() == -5

def test_mul_real():
    x = Real.fromint(10)
    y = Real.fromint(6)
    res = x.mul(y)
    assert res.toint() == 60
    x = Real.fromint(-10)
    y = Real.fromint(6)
    res = x.mul(y)
    assert res.toint() == -60
    x = Real.fromint(-10)
    y = Real.fromint(-6)
    res = x.mul(y)
    assert res.toint() == 60
    x = Real.fromint(4, 2)
    y = Real.fromint(9, 3)
    res = x.mul(y)
    assert res.toint() == 6
    x = Real.fromint(5, 2)
    y = Real.fromint(2, 5)
    res = x.mul(y)
    assert res.toint() == 1
    x = Real.fromint(-5, 2)
    y = Real.fromint(2, 5)
    res = x.mul(y)
    assert res.toint() == -1
    x = Real.fromint(-5, 2)
    y = Real.fromint(2, -5)
    res = x.mul(y)
    assert res.toint() == 1

def test_div_real():
    x = Real.fromint(10)
    y = Real.fromint(2)
    res = x.div(y)
    assert res.toint() == 5
    x = Real.fromint(-10)
    y = Real.fromint(2)
    res = x.div(y)
    assert res.toint() == -5
    x = Real.fromint(1, 5)
    y = Real.fromint(1, 25)
    res = x.div(y)
    assert res.toint() == 5
    x = Real.fromint(1, -5)
    y = Real.fromint(1, 25)
    res = x.div(y)
    assert res.toint() == -5
    x = Real.fromint(-1, 5)
    y = Real.fromint(1, -25)
    res = x.div(y)
    assert res.toint() == 5
    x = Real.fromint(-4, -2)
    assert x.num.toint() == 2
    assert x.den.toint() == 1
    x = Real.fromint(-4, 2)
    assert x.num.toint() == -2
    assert x.den.toint() == 1
    x = Real.fromint(4, -2)
    assert x.num.toint() == -2
    assert x.den.toint() == 1

def test_neg_real():
    x = Real.fromint(10)
    res = x.neg()
    assert res.toint() == -10
    x = Real.fromint(-10)
    res = x.neg()
    assert res.toint() == 10
    x = Real.fromint(4, 2)
    res = x.neg()
    assert res.toint() == -2
    x = Real.fromint(-4, 2)
    res = x.neg()
    assert res.toint() == 2
    x = Real.fromint(4, -2)
    res = x.neg()
    assert res.toint() == 2

def test_abs_real():
    x = Real.fromint(10)
    res = x.abs()
    assert res.toint() == 10
    x = Real.fromint(-10)
    res = x.abs()
    assert res.toint() == 10
    x = Real.fromint(4, 2)
    res = x.abs()
    assert res.toint() == 2
    x = Real.fromint(-4, 2)
    res = x.abs()
    assert res.toint() == 2
    x = Real.fromint(4, -2)
    res = x.abs()
    assert res.toint() == 2

def test_eq_real():
    x = Real.fromint(10)
    y = Real.fromint(10)
    res = x.eq(y)
    assert res == True
    x = Real.fromint(10)
    y = Real.fromint(-3)
    res = x.eq(y)
    assert res == False
    x = Real.fromint(2, 7)
    y = Real.fromint(2, 7)
    res = x.eq(y)
    assert res == True
    x = Real.fromint(2, 9)
    y = Real.fromint(2, 7)
    res = x.eq(y)
    assert res == False

def test_lt_real():
    x = Real.fromint(10)
    y = Real.fromint(11)
    res1 = x.lt(y)
    res2 = y.lt(x)
    assert res1 == True
    assert res2 == False
    x = Real.fromint(-10)
    y = Real.fromint(2)
    res1 = x.lt(y)
    res2 = y.lt(x)
    assert res1 == True
    assert res2 == False
    x = Real.fromint(10)
    y = Real.fromint(10)
    res = x.lt(y)
    assert res == False
    x = Real.fromint(1, 3)
    y = Real.fromint(5, 2)
    res = x.lt(y)
    assert res == True
    x = Real.fromint(1, 3)
    y = Real.fromint(1, 3)
    res = x.lt(y)
    assert res == False
    x = Real.fromint(-1, 3)
    y = Real.fromint(1, 6)
    res = x.lt(y)
    assert res == True
    x = Real.fromint(1, -3)
    y = Real.fromint(1, -6)
    res = x.lt(y)
    assert res == True

def test_gt_real():
    x = Real.fromint(10)
    y = Real.fromint(8)
    res1 = x.gt(y)
    res2 = y.gt(x)
    assert res1 == True
    assert res2 == False
    x = Real.fromint(10)
    y = Real.fromint(-11)
    res1 = x.gt(y)
    res2 = y.gt(x)
    assert res1 == True
    assert res2 == False
    x = Real.fromint(2, 7)
    y = Real.fromint(2, 9)
    res1 = x.gt(y)
    res2 = y.gt(x)
    assert res1 == True
    assert res2 == False
    x = Real.fromint(-1, 3)
    y = Real.fromint(1, 6)
    res1 = x.gt(y)
    res2 = y.gt(x)
    assert res1 == False
    assert res2 == True
    x = Real.fromint(1, -3)
    y = Real.fromint(1, -6)
    res = x.gt(y)
    assert res == False

def test_le_real():
    x = Real.fromint(10)
    y = Real.fromint(10)
    res = x.le(y)
    assert res == True
    x = Real.fromint(10)
    y = Real.fromint(8)
    res1 = x.le(y)
    res2 = y.le(x)
    assert res1 == False
    assert res2 == True
    x = Real.fromint(10)
    y = Real.fromint(-11)
    res1 = x.le(y)
    res2 = y.le(x)
    assert res1 == False
    assert res2 == True
    x = Real.fromint(2, 7)
    y = Real.fromint(2, 9)
    res1 = x.le(y)
    res2 = y.le(x)
    assert res1 == False
    assert res2 == True
    x = Real.fromint(-1, 3)
    y = Real.fromint(1, 6)
    res1 = x.le(y)
    res2 = y.le(x)
    assert res1 == True
    assert res2 == False
    x = Real.fromint(1, -3)
    y = Real.fromint(1, -6)
    res = x.le(y)
    assert res == True
    x = Real.fromint(1, -3)
    y = Real.fromint(-1, 3)
    res = x.le(y)
    assert res == True

def test_ge_real():
    x = Real.fromint(10)
    y = Real.fromint(10)
    res = x.ge(y)
    assert res == True
    x = Real.fromint(10)
    y = Real.fromint(8)
    res1 = x.ge(y)
    res2 = y.ge(x)
    assert res1 == True
    assert res2 == False
    x = Real.fromint(10)
    y = Real.fromint(-11)
    res1 = x.ge(y)
    res2 = y.ge(x)
    assert res1 == True
    assert res2 == False
    x = Real.fromint(2, 7)
    y = Real.fromint(2, 9)
    res1 = x.ge(y)
    res2 = y.ge(x)
    assert res1 == True
    assert res2 == False
    x = Real.fromint(-1, 3)
    y = Real.fromint(1, 6)
    res1 = x.ge(y)
    res2 = y.ge(x)
    assert res1 == False
    assert res2 == True
    x = Real.fromint(1, -3)
    y = Real.fromint(1, -6)
    res = x.ge(y)
    assert res == False
    x = Real.fromint(1, -3)
    y = Real.fromint(-1, 3)
    res = x.ge(y)
    assert res == True

def test_corner_real():
    x = Real.fromint(2**63-1)
    assert x.den.str() == "1"
    assert x.num.str() == str(2**63-1)
    x = Real.fromint(-2**63)
    assert x.toint() == -2**63
    x = Real.fromint(-2**63)
    y = Real.fromint(1)
    res = x.add(y)
    assert res.toint() == -2**63+1
    x = Real.fromint(1, -2**63)
    assert x.num.str() == str(-1)
    assert x.den.str() == str(2**63)
    x = Real.fromint(1, 2**63-1)
    assert x.num.str() == "1"
    assert x.den.str() == str(2**63-1)
    x = Real.fromint(2**63-1, 2**63-1)
    assert x.toint() == 1
    x = Real.fromint(-2**63, -2**63)
    assert x.toint() == 1
    x = Real.fromint(2**63-1, -2**63)
    assert x.num.str() == str(-(2**63-1))
    assert x.den.str() == str(2**63)
    x = Real.fromint(-2**63, 2**63-1)
    assert x.num.str() == str(-2**63)
    assert x.den.str() == str(2**63-1)
    x = Real.fromint(-2**63)
    y = Real.fromint(-2**10)
    res = x.add(y)
    assert res.num.str() == str(-2**63-2**10)
    assert res.den.str() == str(1)
    x = Real.fromint(2**63-1)
    y = Real.fromint(3)
    res = x.add(y)
    assert res.num.str() == str(2**63+2)
    assert res.den.str() == str(1)

def test_fromstr_real():
    x = Real.fromstr("12")
    assert x.den.tolong() == 1
    assert x.num.tolong() == 12

def test_sqrt_real():
    x = Real.fromstr("4")
    res = x.sqrt()
    assert res.num.tolong() == 2
    assert res.den.tolong() == 1
    x = Real.fromstr("26")
    res = x.sqrt()
    assert res.den.tolong() == 13440582586105723640064737480160
    assert res.num.tolong() == 68533792880608460985460475212801
    x = Real.fromstr("0")
    res = x.sqrt()
    assert res.num.tolong() == 0
    assert res.den.tolong() == 1
    x = Real.fromstr("1")
    res = x.sqrt()
    assert res.num.tolong() == 1
    assert res.den.tolong() == 1


def rr_den_pos(num, den):
    num = rbigint.fromlong(num)
    den = rbigint.fromlong(den)
    return Real(num, den, False)

def test_pow_real():
    x = Real.fromint(1, 5)
    res = x.pow(0)
    assert res.num.toint() == 1
    assert res.den.toint() == 1
    x = rr_den_pos(1997831095010467864672715021484102, 3236962239656889)
    res = x.pow(157)
    assert res.num.tolong() == 190409951913019359038317205622379457602035828161843624841207699640927333775046592117576433413376876105733603132434130232503683347785849318708509006432638953486459208060845830210831558599521266976597040288338545867344941559448210334962626849683138394215452361342483721896244695900342376820803404194896623578448721624401505793922858830089779388353229122375093315200327346176160201718081720922073765801503425541320651826634918043017133821123183693597845974507140550679408598425919072817502440705107563048772735794355949110660987620452824340776421141373378290388817722475777148149975006672300034940593562448675468527495896721557991715834489874636851054079281397033594218236496485700225830148375518405292368299266009779917697829068198692096000628965707869321183885417286230992305081062530810866126143930416846043662822682676265086593516620362109350087692151401171574058530429406860774077169678007037105575066100122224458321910152117944402331106583508534456254328581000038776850549037516306343853937763154535726419506592565250043512735506500050261473531397610769914398937629531939801849672473635189016987431448735983440291380473040048197144019936119057341031918984486870504545050237287974159943109902318579139573274087239158619821430962845884982613093737307323878091650016619308103208329051403017616292867427190150854611336696189675504308156673508645105181281534412711098521536335431300694163571611622508279641087680718962608046173975982960763365829378072699378641778714190817639937109358325321390501277552874635888901134603602189317283813110095294463428256170489469014615855156113040491798719415902149707071886660965416331005536296213055293194324606271255372690723430086511418166517112555757502202943421083825056523256193875236868131174984183525966873195540423765385513537781389750320784087424269992287016787675035568680805164909381373540508162634656613331790628358843988423467684724221226370341755451140190650781392496569578390881482246137743560727961120731986954334551195036809498851891499076178759525544347615692909093530014144601840102691015315169454460358563561301836839948762170182154177820560799228353437527328887865228305164982877950354698743822854076828223264157126244593770905192754873629164102000824458166916255482474653728766584423935436416665805589318534422094319896764912922891833539002715876662525027414796574568793844818057873912316649506326200489784545284231310640311258092576397121085874623483705221538967981926375857588113488064860838693989619646910717850643725125121151234511228165467105756138172053457546627173533402454314427348881592924832613424836721378626746053259587650488905814047739578955554695190014861757531195585001381395177155962377973636592899925717133673364683892637460352899677059394634219468963753575873664804765393235790882252616112308232444860780269091312300714438345143185170047348769027612481660663086538261726430502662395476908993715884211257866079156686243943175661299906030620025565620307377497265614217590773929914349479073535628553786049948004222888033286872604240323620881874001858192397525515375033096723570220950963746360502322678972754702551350841260269564403529679481818049357095857577062718147264051178345559973013611595399542327251244339857400927908447217906468708735571398954364678012999940266806891496476698708680508763560788258191054422672424829577101528077350460987995283796127345586232872348026585327705119426167260906765363432483507311318583716014273159306874704208102292570789326518795588220950969393809356453658489749373250557552793974847344630507447675300224283881898448032208475834951974207816067748495800862805749758479452665073073752074093203171173647866537953578871912720053270564531412228847987973308723256009261963987757440489290836501484070922113537049266434700522488231367414903099627460332351165673486972622704133190312924635158945144528021166776465675177478477033832562308925055120304997687890399163253132001730170107718281112510035708801649669645292211763408389267000376007761925250203108215212103518733189179015050338309991434427035536843348866615402560771870192281519878418938465048851057800568710574851328316280359702405178729302310881503358523301282670768976929342234219755958251763163623019122054132586638636055406646489634749338893327349077769886809892948821987235170145851885728851836626227988340402437205450072047914494298390487209025687453319119517297422542231932617241772961034263051083941093827549112012830097767776861469860823431336653616381002324991088816484641564510478930156189810585298867775911888958837287778813463079052280097983414742675627089050251859351421557719614944181797856661305825845675150845525997176719912149567334085843289445778263408335744217060071779081954294980610542192840054769433871220932564149414702861477491108227104599349559153034972238340329231037305318962059908485157939430601857863362639690950321251652038851290606630911836583621377615188689341218152625038339018868626843846701526168656950409293804227910392545916376960555237496816629944195699706390319737311331640473976149436676091791677052875736540960938891648580742748218248088950832621657039938672448151609227744465296003314690599111225878734167290173489785600107683712190915766399968575750144
    assert res.den.tolong() == 152605935647679226282756190536636722669030930172767429260321713188655918063291372275949200913016469230881861936703267926892858191458666863236706148079968034303895171583534914159543857359589737180559339571339024633993101292297056083370608964594151791160554700812317461700468494874387520259364884336717586817778868394969465624697599648081857317122403102600721538641626163500190856568740415042847729062808976305298778819845783956670623356512378943285147657051165807324310741194576085942198601527892840213183790696348482655206168963355811560025082160505184110371696390624220005143785589654253497186816424880382583974181896693796771489424351793841770369303040204386469621500846258204487691049699829361937627175912264554944061791381666300044781732730751581825809003317286906774184845677020999700170418521310117798552782595025178116845856610447237341949406468521935351149232417276311757882172794671430098193798720976426930292527069917377994943054079172955248496471620627384146039114277553316420411898571728140514292645828750708028744876224446369411230868911890279944097845355858026893487929614329997659931762053654664862635020403815047127361278339525656399780842537282910548581007949535930754506407338788657741580953742155958283616108899207670258999952786492547280717908819145621372483197929855444767007288504579156624502324541571430514293204141107551108524249139085703904546174763838774659306760589080680752392716409190922535467519266207238159929509950267336791220517552975604697469453990196616594989092187988315421274118513323516422290303534101018693976123356270438385190370166384215870643122537135721541190703525629992429757758543711003399749182492092530329093962986465222895621542205981860941339743836893566694051422789063773150827779357821843524199955673573901121976427626673677852336319783284562438046308325164627990165473060582075767921495521043270500857512488056907397699831057657336723350597095074559442033991631963260738967102173706731010860031600250844534707322198534068002659601304943428683479507006764170029792019208835245080192898531303668306040449949556192399033456250780662678186777626097370254236651078644165664192559131037070113809176626408872070305666367546775016246021122268904569928324039173898484742373125824909799788656911845746229468127290683128367592262078509794696336528838202883291443449142660392362587336174811218403556760305442842323206883
    frac = Fraction(1997831095010467864672715021484102, 3236962239656889)
    frac2 = frac ** 157
    assert frac2.numerator == 190409951913019359038317205622379457602035828161843624841207699640927333775046592117576433413376876105733603132434130232503683347785849318708509006432638953486459208060845830210831558599521266976597040288338545867344941559448210334962626849683138394215452361342483721896244695900342376820803404194896623578448721624401505793922858830089779388353229122375093315200327346176160201718081720922073765801503425541320651826634918043017133821123183693597845974507140550679408598425919072817502440705107563048772735794355949110660987620452824340776421141373378290388817722475777148149975006672300034940593562448675468527495896721557991715834489874636851054079281397033594218236496485700225830148375518405292368299266009779917697829068198692096000628965707869321183885417286230992305081062530810866126143930416846043662822682676265086593516620362109350087692151401171574058530429406860774077169678007037105575066100122224458321910152117944402331106583508534456254328581000038776850549037516306343853937763154535726419506592565250043512735506500050261473531397610769914398937629531939801849672473635189016987431448735983440291380473040048197144019936119057341031918984486870504545050237287974159943109902318579139573274087239158619821430962845884982613093737307323878091650016619308103208329051403017616292867427190150854611336696189675504308156673508645105181281534412711098521536335431300694163571611622508279641087680718962608046173975982960763365829378072699378641778714190817639937109358325321390501277552874635888901134603602189317283813110095294463428256170489469014615855156113040491798719415902149707071886660965416331005536296213055293194324606271255372690723430086511418166517112555757502202943421083825056523256193875236868131174984183525966873195540423765385513537781389750320784087424269992287016787675035568680805164909381373540508162634656613331790628358843988423467684724221226370341755451140190650781392496569578390881482246137743560727961120731986954334551195036809498851891499076178759525544347615692909093530014144601840102691015315169454460358563561301836839948762170182154177820560799228353437527328887865228305164982877950354698743822854076828223264157126244593770905192754873629164102000824458166916255482474653728766584423935436416665805589318534422094319896764912922891833539002715876662525027414796574568793844818057873912316649506326200489784545284231310640311258092576397121085874623483705221538967981926375857588113488064860838693989619646910717850643725125121151234511228165467105756138172053457546627173533402454314427348881592924832613424836721378626746053259587650488905814047739578955554695190014861757531195585001381395177155962377973636592899925717133673364683892637460352899677059394634219468963753575873664804765393235790882252616112308232444860780269091312300714438345143185170047348769027612481660663086538261726430502662395476908993715884211257866079156686243943175661299906030620025565620307377497265614217590773929914349479073535628553786049948004222888033286872604240323620881874001858192397525515375033096723570220950963746360502322678972754702551350841260269564403529679481818049357095857577062718147264051178345559973013611595399542327251244339857400927908447217906468708735571398954364678012999940266806891496476698708680508763560788258191054422672424829577101528077350460987995283796127345586232872348026585327705119426167260906765363432483507311318583716014273159306874704208102292570789326518795588220950969393809356453658489749373250557552793974847344630507447675300224283881898448032208475834951974207816067748495800862805749758479452665073073752074093203171173647866537953578871912720053270564531412228847987973308723256009261963987757440489290836501484070922113537049266434700522488231367414903099627460332351165673486972622704133190312924635158945144528021166776465675177478477033832562308925055120304997687890399163253132001730170107718281112510035708801649669645292211763408389267000376007761925250203108215212103518733189179015050338309991434427035536843348866615402560771870192281519878418938465048851057800568710574851328316280359702405178729302310881503358523301282670768976929342234219755958251763163623019122054132586638636055406646489634749338893327349077769886809892948821987235170145851885728851836626227988340402437205450072047914494298390487209025687453319119517297422542231932617241772961034263051083941093827549112012830097767776861469860823431336653616381002324991088816484641564510478930156189810585298867775911888958837287778813463079052280097983414742675627089050251859351421557719614944181797856661305825845675150845525997176719912149567334085843289445778263408335744217060071779081954294980610542192840054769433871220932564149414702861477491108227104599349559153034972238340329231037305318962059908485157939430601857863362639690950321251652038851290606630911836583621377615188689341218152625038339018868626843846701526168656950409293804227910392545916376960555237496816629944195699706390319737311331640473976149436676091791677052875736540960938891648580742748218248088950832621657039938672448151609227744465296003314690599111225878734167290173489785600107683712190915766399968575750144
    assert frac2.denominator == 152605935647679226282756190536636722669030930172767429260321713188655918063291372275949200913016469230881861936703267926892858191458666863236706148079968034303895171583534914159543857359589737180559339571339024633993101292297056083370608964594151791160554700812317461700468494874387520259364884336717586817778868394969465624697599648081857317122403102600721538641626163500190856568740415042847729062808976305298778819845783956670623356512378943285147657051165807324310741194576085942198601527892840213183790696348482655206168963355811560025082160505184110371696390624220005143785589654253497186816424880382583974181896693796771489424351793841770369303040204386469621500846258204487691049699829361937627175912264554944061791381666300044781732730751581825809003317286906774184845677020999700170418521310117798552782595025178116845856610447237341949406468521935351149232417276311757882172794671430098193798720976426930292527069917377994943054079172955248496471620627384146039114277553316420411898571728140514292645828750708028744876224446369411230868911890279944097845355858026893487929614329997659931762053654664862635020403815047127361278339525656399780842537282910548581007949535930754506407338788657741580953742155958283616108899207670258999952786492547280717908819145621372483197929855444767007288504579156624502324541571430514293204141107551108524249139085703904546174763838774659306760589080680752392716409190922535467519266207238159929509950267336791220517552975604697469453990196616594989092187988315421274118513323516422290303534101018693976123356270438385190370166384215870643122537135721541190703525629992429757758543711003399749182492092530329093962986465222895621542205981860941339743836893566694051422789063773150827779357821843524199955673573901121976427626673677852336319783284562438046308325164627990165473060582075767921495521043270500857512488056907397699831057657336723350597095074559442033991631963260738967102173706731010860031600250844534707322198534068002659601304943428683479507006764170029792019208835245080192898531303668306040449949556192399033456250780662678186777626097370254236651078644165664192559131037070113809176626408872070305666367546775016246021122268904569928324039173898484742373125824909799788656911845746229468127290683128367592262078509794696336528838202883291443449142660392362587336174811218403556760305442842323206883

@given(strategies.integers(), positive_ints)
def test_real_neg_hypothesis(num, den):
    r = rr_den_pos(num, den)
    r_2 = r.neg()
    assert r.den.eq(r_2.den)
    assert r.num.neg().eq(r_2.num)

@given(strategies.integers(), positive_ints)
def test_real_abs_hypothesis(num, den):
    r = rr_den_pos(num, den)
    r_2 = r.abs()
    assert r.den.eq(r_2.den)
    assert r.num.abs().eq(r_2.num)


@given(strategies.integers(), positive_ints, strategies.integers(), positive_ints)
def test_real_add_hypothesis(num1, den1, num2, den2):
    r1 = rr_den_pos(num1, den1)
    r2 = rr_den_pos(num2, den2)
    res = r1.add(r2)
    frac = Fraction(num1, den1) + Fraction(num2, den2)
    assert res.num.tolong() == frac.numerator
    assert res.den.tolong() == frac.denominator

@given(strategies.integers(), positive_ints, strategies.integers(), positive_ints)
def test_real_sub_hypothesis(num1, den1, num2, den2):
    r1 = rr_den_pos(num1, den1)
    r2 = rr_den_pos(num2, den2)
    res = r1.sub(r2)
    frac = Fraction(num1, den1) - Fraction(num2, den2)
    assert res.num.tolong() == frac.numerator
    assert res.den.tolong() == frac.denominator

@given(strategies.integers(), positive_ints, strategies.integers(), positive_ints)
def test_real_mul_hypothesis(num1, den1, num2, den2):
    r1 = rr_den_pos(num1, den1)
    r2 = rr_den_pos(num2, den2)
    res = r1.mul(r2)
    frac = Fraction(num1, den1) * Fraction(num2, den2)
    assert res.num.tolong() == frac.numerator
    assert res.den.tolong() == frac.denominator

@given(strategies.integers(), positive_ints, strategies.integers().filter(lambda n: n != 0), positive_ints)
def test_real_div_hypothesis(num1, den1, num2, den2):
    r1 = rr_den_pos(num1, den1)
    r2 = rr_den_pos(num2, den2)
    res = r1.div(r2)
    frac = Fraction(num1, den1) / Fraction(num2, den2)
    assert res.num.tolong() == frac.numerator
    assert res.den.tolong() == frac.denominator

@given(strategies.integers(), positive_ints)
def test_real_ceil_hypothesis(num, den):
    r = rr_den_pos(num, den)
    res = r.ceil()
    frac = Fraction(num, den)
    if num % den == 0:
        assert res.tolong() == frac.numerator
    else:
        if num > 0:
            assert res.tolong() == frac.numerator // frac.denominator + 1
        else:
            assert res.tolong() == -((-frac.numerator) // frac.denominator)

@given(strategies.integers(), positive_ints)
def test_real_floor_hypothesis(num, den):
    r = rr_den_pos(num, den)
    res = r.floor()
    frac = Fraction(num, den)
    if num % den == 0:
        assert res.tolong() == frac.numerator
    else:
        if num > 0:
            assert res.tolong() == frac.numerator // frac.denominator
        else:
            assert res.tolong() == -((-frac.numerator) // frac.denominator + 1)
    assert res.le(r.ceil())

@given(strategies.integers(), positive_ints, strategies.integers(), positive_ints)
def test_real_comparisons_hypothesis(num1, den1, num2, den2):
    r1 = rr_den_pos(num1, den1)
    r2 = rr_den_pos(num2, den2)
    frac1 = Fraction(num1, den1)
    frac2 = Fraction(num2, den2)
    assert r1.eq(r2) == (frac1 == frac2)
    assert r1.lt(r2) == (frac1 < frac2)
    assert r1.gt(r2) == (frac1 > frac2)
    assert r1.le(r2) == (frac1 <= frac2)
    assert r1.ge(r2) == (frac1 >= frac2)

@given(strategies.integers().filter(lambda n: n != 0), positive_ints, strategies.integers(min_value = -25, max_value = 25))
@example(num=-136245869567953879195472884560736319741L, den=1, n=39)
def test_real_pow_hypothesis(num, den, n):
    r = rr_den_pos(num, den)
    res = r.pow(n)
    frac = Fraction(num, den)
    frac_pow = frac ** n
    assert res.num.tolong() == frac_pow.numerator
    assert res.den.tolong() == frac_pow.denominator

@given(strategies.integers(), strategies.integers(min_value = 0, max_value = 100), strategies.integers(min_value = 0))
def test_real_fromstr_2_hypothesis(integer, zeros, fractional):
    num_str = str(integer) + "." + "0"*zeros + str(fractional)
    r = Real.fromstr(num_str)
    frac = Fraction(num_str)
    assert r.num.tolong() == frac.numerator
    assert r.den.tolong() == frac.denominator

@settings(deadline=1000)
@given(strategies.floats(allow_nan = False, allow_infinity = False, min_value = 0, max_value = float(2**63-1)))
def test_real_sqrt_hypothesis(a):
    from rpython.rlib.rfloat import float_as_rbigint_ratio
    num, den = float_as_rbigint_ratio(a)
    x = Real(num, den).sqrt()
    assert math.sqrt(a) == x.num.truediv(x.den)
    num, den = float_as_rbigint_ratio(math.sqrt(a))
    assert max(len(x.num.str()), len(x.den.str())) >= max(len(num.str()), len(den.str()))
